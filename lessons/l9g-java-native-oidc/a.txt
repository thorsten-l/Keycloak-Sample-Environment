1. Folgende Dateien ergeben ein Java-Programm, das OpenID Connect nativ ohne weitere Bibliotheken oder Frameworks implementiert.
2. Das fertige Programm wird über Docker compose gestartet und kann über port 8081 erreicht und ausprobiert werden.
3. Konvertiere dieses Java Programm in ein Python Programm das im HTML Browser exact genauso aussieht und die identische native Funktionalität hat, ebenfalls ohne Verwendung einer Python OIDC Bibliothek.
4. Das Python Programm soll ebenfalls über docker compose gestartet werden. Schreibe ebenfalls eine entsprechende docker-compose.yaml datei.


FILE: ./docker-compose.yaml
----------------------------------------------------------
services:
  app1-sb335:
    image: bellsoft/liberica-openjdk-alpine:21
    hostname: app1.dev.sonia.de
    ports:
      - "8081:8081"
    volumes:
      - .:/work
    command: "java -jar /work/target/l9g-webapp-native-oidc-0.0.1-SNAPSHOT.jar"
      
networks:
  default:
    name: iddev
    external: true
 
FILE: ./pom.xml
----------------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>3.3.5</version>
    <relativePath/> <!-- lookup parent from repository -->
  </parent>
  <groupId>l9g.webapp</groupId>
  <artifactId>l9g-webapp-native-oidc</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>l9g-webapp-native-oidc</name>
  <description>A native OIDC Implementation for education.</description>
  <url/>
  <licenses>
    <license/>
  </licenses>
  <developers>
    <developer/>
  </developers>
  <scm>
    <connection/>
    <developerConnection/>
    <tag/>
    <url/>
  </scm>
  
  <properties>
    <java.version>21</java.version>
    <build.profile>default</build.profile>
    <exec.inheritIo>true</exec.inheritIo>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>
  
  <dependencies>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-jersey</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-thymeleaf</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
    </dependency>
    
    <!-- webjars -->
    <dependency>
      <groupId>org.webjars</groupId>
      <artifactId>webjars-locator</artifactId>
      <version>0.52</version>
    </dependency>
    <dependency>
      <groupId>org.webjars</groupId>
      <artifactId>bootstrap</artifactId>
      <version>5.3.3</version>
    </dependency>
    <dependency>
      <groupId>org.webjars</groupId>
      <artifactId>font-awesome</artifactId>
      <version>6.6.0</version>
    </dependency>
    
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <optional>true</optional>
    </dependency>
  </dependencies>

  <build>
    
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.13.0</version>
        <configuration>
          <encoding>${project.build.sourceEncoding}</encoding>
          <release>${java.version}</release>
          <compilerArgs>
            <arg>-proc:full</arg>
          </compilerArgs>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <configuration>
          <executable>true</executable>
          <excludes>
            <exclude>
              <groupId>org.projectlombok</groupId>
              <artifactId>lombok</artifactId>
            </exclude>
          </excludes>
        </configuration>
        <executions>
          <execution>
            <id>build-info</id>
            <goals>
              <goal>build-info</goal>
            </goals>
            <configuration>
              <additionalProperties>
                <java.version>${java.version}</java.version>
                <java.version.date>${java.version.date}</java.version.date>
                <java.vendor>${java.vendor}</java.vendor>
                <java.vendor.url>${java.vendor.url}</java.vendor.url>
                <java.vm.name>${java.vm.name}</java.vm.name>
                <java.vm.vendor>${java.vm.vendor}</java.vm.vendor>
                <java.vm.version>${java.vm.version}</java.vm.version>
                <java.runtime.name>${java.runtime.name}</java.runtime.name>
                <java.runtime.version>${java.runtime.version}</java.runtime.version>
                <description>${project.description}</description>
                <profile>${build.profile}</profile>
                <os.arch>${os.arch}</os.arch>
                <os.name>${os.name}</os.name>
                <os.version>${os.version}</os.version>
              </additionalProperties>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

</project>
 
FILE: ./nb-configuration.xml
----------------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<project-shared-configuration>
    <!--
This file contains additional configuration written by modules in the NetBeans IDE.
The configuration is intended to be shared among all the users of project and
therefore it is assumed to be part of version control checkout.
Without this configuration present, some functionality in the IDE may be limited or fail altogether.
-->
    <properties xmlns="http://www.netbeans.org/ns/maven-properties-data/1">
        <!--
Properties that influence various parts of the IDE, especially code formatting and the like. 
You can copy and paste the single properties, into the pom.xml file and the IDE will pick them up.
That way multiple projects can share the same settings (useful for formatting rules for example).
Any value defined here will override the pom.xml file value but is only applicable to the current project.
-->
        <org-zeroturnaround-jrebel-netbeans.rebelXmlGenerationInvariantToken>PGFwcGxpY2F0aW9uIGdlbmVyYXRlZC1ieT0ibmV0YmVhbnMiPjxjbGFzc3BhdGg+PGRpciBuYW1lPSIvVXNlcnMvdGgvUHJvamVjdHMvZG9ja2VyL0tleWNsb2FrLVNhbXBsZS1FbnZpcm9ubWVudC9sZXNzb25zL2w5Zy13ZWJhcHAtbmF0aXZlLW9pZGMvdGFyZ2V0L2NsYXNzZXMiPjwvZGlyPjwvY2xhc3NwYXRoPjwvYXBwbGljYXRpb24+</org-zeroturnaround-jrebel-netbeans.rebelXmlGenerationInvariantToken>
        <netbeans.compile.on.save>all</netbeans.compile.on.save>
    </properties>
</project-shared-configuration>
 
FILE: ./nbactions.xml
----------------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<actions>
        <action>
            <actionName>run</actionName>
            <packagings>
                <packaging>jar</packaging>
            </packagings>
            <goals>
                <goal>process-classes</goal>
                <goal>org.codehaus.mojo:exec-maven-plugin:3.1.0:exec</goal>
            </goals>
            <properties>
                <exec.vmArgs></exec.vmArgs>
                <exec.args>${exec.vmArgs} -classpath %classpath ${exec.mainClass} ${exec.appArgs}</exec.args>
                <exec.appArgs></exec.appArgs>
                <exec.mainClass>l9g.webapp.nativeoidc.L9gWebappNativeOidcApplication</exec.mainClass>
                <exec.executable>java</exec.executable>
            </properties>
        </action>
        <action>
            <actionName>debug</actionName>
            <packagings>
                <packaging>jar</packaging>
            </packagings>
            <goals>
                <goal>process-classes</goal>
                <goal>org.codehaus.mojo:exec-maven-plugin:3.1.0:exec</goal>
            </goals>
            <properties>
                <exec.vmArgs>-agentlib:jdwp=transport=dt_socket,server=n,address=${jpda.address}</exec.vmArgs>
                <exec.args>${exec.vmArgs} -classpath %classpath ${exec.mainClass} ${exec.appArgs}</exec.args>
                <exec.appArgs></exec.appArgs>
                <exec.mainClass>l9g.webapp.nativeoidc.L9gWebappNativeOidcApplication</exec.mainClass>
                <exec.executable>java</exec.executable>
                <jpda.listen>true</jpda.listen>
            </properties>
        </action>
        <action>
            <actionName>profile</actionName>
            <packagings>
                <packaging>jar</packaging>
            </packagings>
            <goals>
                <goal>process-classes</goal>
                <goal>org.codehaus.mojo:exec-maven-plugin:3.1.0:exec</goal>
            </goals>
            <properties>
                <exec.vmArgs></exec.vmArgs>
                <exec.args>${exec.vmArgs} -classpath %classpath ${exec.mainClass} ${exec.appArgs}</exec.args>
                <exec.mainClass>l9g.webapp.nativeoidc.L9gWebappNativeOidcApplication</exec.mainClass>
                <exec.executable>java</exec.executable>
                <exec.appArgs></exec.appArgs>
            </properties>
        </action>
    </actions>
 
FILE: ./src/main/resources/rebel.xml
----------------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>

<!--
  This is the JRebel configuration file. It maps the running application to your IDE workspace, enabling JRebel reloading for this project.
  Refer to https://manuals.jrebel.com/jrebel/standalone/config.html for more information.
-->
<application generated-by="netbeans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.zeroturnaround.com" xsi:schemaLocation="http://www.zeroturnaround.com http://update.zeroturnaround.com/jrebel/rebel-2_1.xsd">

	<classpath>
		<dir name="/Users/th/Projects/docker/Keycloak-Sample-Environment/lessons/l9g-webapp-native-oidc/target/classes">
		</dir>
	</classpath>

</application>
 
FILE: ./src/main/resources/templates/home.html
----------------------------------------------------------
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:th="http://www.thymeleaf.org">
  <head>
    <title>Home</title>
    <meta charset="UTF-8"></meta>
    <meta name="viewport" content="width=device-width, initial-scale=1" ></meta>
    <link th:rel="stylesheet" th:href="@{/webjars/bootstrap/css/bootstrap.min.css}" ></link>
    <link th:rel="stylesheet" th:href="@{/css/main.css}" ></link>
  </head>
  <body>

    <div class="container mt-4">
      <h1>Home</h1>

      <nav class="appheader">
        <div class="nav nav-tabs" id="nav-tab" role="tablist">
          <a class="nav-link active" id="nav-login-url-tab" data-bs-toggle="tab" href="#nav-login-url" role="tab" aria-controls="nav-login-url" aria-selected="true">Login-URL</a>
          <a class="nav-link" id="nav-session-tab" data-bs-toggle="tab" href="#nav-session" role="tab" aria-controls="nav-session" aria-selected="false">Session Attributes</a>
          <a class="nav-link" id="nav-discovery-tab" data-bs-toggle="tab" href="#nav-discovery" role="tab" aria-controls="nav-discovery" aria-selected="false">OIDC Discovery</a>
          <a class="nav-link" id="nav-properties-tab" data-bs-toggle="tab" href="#nav-properties" role="tab" aria-controls="nav-properties" aria-selected="false">Build Properties</a>
        </div>
      </nav>

      <div class="tab-content" id="nav-tabContent">
        <div class="tab-pane fade show active" id="nav-login-url" role="tabpanel" aria-labelledby="nav-login-url-tab">
          <div class="appheader card">
            <div class="card-header">
              <div class="d-flex justify-content-between align-items-center">
                <div class="appcard-title">Login URL</div>
                <a class="btn btn-primary" th:href="${oauth2LoginUri}">LOGIN</a>
              </div>
            </div>
            <div class="card-body">
              <table class="table table-striped">
                <thead>
                  <tr>
                    <th style="width: 10%">Key</th>
                    <th style="width: 40%">Value</th>
                    <th style="width: 50%">Description</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td class="discovery-background">uri</td>
                    <td class="discovery-background" th:text="${oauth2AuthorizationEndpoint}"></td>
                    <td class="discovery-background" th:text="#{authorization_endpoint}"></td>
                  </tr>
                  <tr>
                    <td class="config-background">client_id</td>
                    <td class="config-background" th:text="${oauth2ClientId}"></td>
                    <td class="config-background" th:text="#{client_id}"></td>
                  </tr>
                  <tr>
                    <td class="config-background">response_type</td>
                    <td class="config-background" th:text="${oauth2ResponseType}"></td>
                    <td class="config-background" th:text="#{response_type}"></td>
                  </tr>
                  <tr>
                    <td class="config-background">redirect_uri</td>
                    <td class="config-background" th:text="${oauth2RedirectUri}"></td>
                    <td class="config-background" th:text="#{redirect_uri}"></td>
                  </tr>
                  <tr>
                    <td class="config-background">scope</td>
                    <td class="config-background" th:text="${oauth2ClientScope}"></td>
                    <td class="config-background" th:text="#{scope}"></td>
                  </tr>
                  <tr>
                    <td class="random-background">state</td>
                    <td class="random-background" th:text="${oauth2State}"></td>
                    <td class="random-background" th:text="#{state}"></td>
                  </tr>
                  <tr>
                    <td class="optional-background">code_challenge</td>
                    <td class="random-background" th:text="${oauth2CodeChallenge}"></td>
                    <td class="random-background" th:text="#{code_challenge}"></td>
                  </tr>
                  <tr>
                    <td class="optional-background">code_challenge_method</td>
                    <td class="config-background" th:text="${oauth2CodeChallengeMethod}"></td>
                    <td class="config-background" th:text="#{code_challenge_method}"></td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>

        </div>
        <div class="tab-pane fade show" id="nav-session" role="tabpanel" aria-labelledby="nav-session-tab">
          <div class="appheader card">
            <div class="card-header">
              <div class="appcard-title">Session Attributes</div>
            </div>
            <div class="card-body">
              <table class="table table-striped">
                <thead>
                  <tr>
                    <th style="width: 10%">Key</th>
                    <th style="width: 40%">Value</th>
                    <th style="width: 50%">Description</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td class="random-background">session id</td>
                    <td class="random-background" th:text="${sessionId}"></td>
                    <td class="random-background" th:text="#{session_id}"></td>
                  </tr>
                  <tr>
                    <td class="random-background">oauth2_state</td>
                    <td class="random-background" th:text="${oauth2State}"></td>
                    <td class="random-background" th:text="#{state}"></td>
                  </tr>
                  <tr>
                    <td class="random-background">code_verifier</td>
                    <td class="random-background" th:text="${oauth2CodeVerifier}"></td>
                    <td class="random-background" th:text="#{code_verifier}"></td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
        </div>

        <div class="tab-pane fade show" id="nav-discovery" role="tabpanel" aria-labelledby="nav-discovery-tab">
          <div class="appheader card">
            <div class="card-header">
              <div class="appcard-title">OIDC Discovery</div>
            </div>
            <div class="card-body">
              <table class="table table-striped">
                <thead>
                  <tr>
                    <th style="width: 10%">Key</th>
                    <th style="width: 40%">Value</th>
                    <th style="width: 50%">Description</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td class="config-background">oidc_discovery_url</td>
                    <td class="config-background" th:text="${oidcDiscoveryUri}"></td>
                    <td class="config-background" th:text="#{oidc_discovery_url}"></td>
                  </tr>
                  <tr>
                    <td class="discovery-background">issuer</td>
                    <td class="discovery-background" th:text="${oidcDiscovery.issuer}"></td>
                    <td class="discovery-background" th:text="#{issuer}"></td>
                  </tr>
                  <tr>
                    <td class="discovery-background">authorization_endpoint</td>
                    <td class="discovery-background" th:text="${oidcDiscovery.authorizationEndpoint}"></td>
                    <td class="discovery-background" th:text="#{authorization_endpoint}"></td>
                  </tr>
                  <tr>
                    <td class="discovery-background">token_endpoint</td>
                    <td class="discovery-background" th:text="${oidcDiscovery.tokenEndpoint}"></td>
                    <td class="discovery-background" th:text="#{token_endpoint}"></td>
                  </tr>
                  <tr>
                    <td class="discovery-background">end_session_endpoint</td>
                    <td class="discovery-background" th:text="${oidcDiscovery.endSessionEndpoint}"></td>
                    <td class="discovery-background" th:text="#{end_session_endpoint}"></td>
                  </tr>
                  <tr>
                    <td class="discovery-background">userinfo_endpoint</td>
                    <td class="discovery-background" th:text="${oidcDiscovery.userinfoEndpoint}"></td>
                    <td class="discovery-background" th:text="#{userinfo_endpoint}"></td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
        </div>

        <div class="tab-pane fade show" id="nav-properties" role="tabpanel" aria-labelledby="nav-properties-tab">
          <div class="card appheader">
            <div class="card-header">
              <div class="appcard-title">Build Properties</div>
            </div>
            <div class="card-body">
              <table class="table table-striped">
                <thead>
                  <tr>
                    <th style="width: 10%">Key</th>
                    <th style="width: 40%">Value</th>
                  </tr>
                </thead>
                <tbody>
                  <tr class="align-middle" th:each="entry : ${buildProperties}">
                    <td th:text="${entry.key}"></td>
                    <td th:text="${entry.value}"></td>
                  </tr>
                </tbody>
              </table>
              <p class="mt-4">spring boot version: <span th:text="${springBootVersion}"></span></p>
            </div>
          </div>
        </div>
      </div>

      <div class="row mt-4">
        <div class="col text-center">
          <p class="config-background p-1">Config</p>
        </div>
        <div class="col text-center">
          <p class="discovery-background p-1">Discovery</p>
        </div>
        <div class="col text-center">
          <p class="random-background p-1">Random</p>
        </div>
        <div class="col text-center">
          <p class="optional-background p-1">Optional</p>
        </div>
      </div>
    </div>
    <script th:src="@{/webjars/bootstrap/js/bootstrap.min.js}"></script>
  </body>
</html>
 
FILE: ./src/main/resources/templates/app.html
----------------------------------------------------------
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:th="http://www.thymeleaf.org">

  <head>
    <title>App</title>
    <meta charset="UTF-8"></meta>
    <meta name="viewport" content="width=device-width, initial-scale=1"></meta>
    <link th:rel="stylesheet" th:href="@{/webjars/bootstrap/css/bootstrap.min.css}"></link>
    <link th:rel="stylesheet" th:href="@{/webjars/font-awesome/css/all.min.css}" ></link>
    <link th:rel="stylesheet" th:href="@{/css/main.css}"></link>
  </head>

  <body>
    <div class="container mt-4">
      <h1>App</h1>
      <nav class="appheader">
        <div class="nav nav-tabs" id="nav-tab" role="tablist">
          <a class="nav-link active" id="nav-logout-url-tab" data-bs-toggle="tab" href="#nav-logout-url" role="tab"
             aria-controls="nav-logout-url" aria-selected="true">Logout-URL</a>
          <a class="nav-link" id="nav-userinfo-tab" data-bs-toggle="tab" href="#nav-userinfo" role="tab"
             aria-controls="nav-userinfo" aria-selected="false">Userinfo</a>
          <a class="nav-link" id="nav-idtoken-tab" data-bs-toggle="tab" href="#nav-idtoken" role="tab"
             aria-controls="nav-idtoken" aria-selected="false">ID Token</a>
          <a class="nav-link" id="nav-accesstoken-tab" data-bs-toggle="tab" href="#nav-accesstoken" role="tab"
             aria-controls="nav-accesstoken" aria-selected="false">Access Token</a>
          <a class="nav-link" id="nav-refreshtoken-tab" data-bs-toggle="tab" href="#nav-refreshtoken" role="tab"
             aria-controls="nav-refreshtoken" aria-selected="false">Refresh Token</a>
        </div>
      </nav>

      <div class="tab-content" id="nav-tabContent">
        <div class="tab-pane fade show active" id="nav-logout-url" role="tabpanel" aria-labelledby="nav-logout-url-tab">
          <div class="card appheader">
            <div class="card-header">
              <div class="d-flex justify-content-between align-items-center">
                <div class="appcard-title">Logout URL</div>
                <a class="btn btn-primary" th:href="${oauth2LogoutUri}">LOGOUT</a>
              </div>
            </div>
            <div class="card-body">              
              <table class="table table-striped">
                <thead>
                  <tr>
                    <th style="width: 20%">Key</th>
                    <th style="width: 80%">Value</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td class="discovery-background">uri</td>
                    <td class="discovery-background" th:text="${oauth2EndSessionEndpoint}"></td>
                  </tr>
                  <tr>
                    <td>id_token_hint
                      <div class="mt-2">                    
                        <button class="btn btn-secondary" th:data-token="${oauth2IdToken}" th:onclick="copyTokenFromData(this)"><i class="fa-regular fa-copy"></i></button>
                      </div>
                    </td>
                    <td style="word-break: break-all;" th:text="${oauth2IdToken}"></td>
                  </tr>
                  <tr>
                    <td class="optional-background">post_logout_redirect_uri</td>
                    <td class="config-background" th:text="${oauth2PostLogoutRedirectUri}"></td>
                  </tr>

                  <tr>
                    <td>Copy ID Token</td>
                    <td><a target="_blank" title="View on JWT.io" href="https://jwt.io"><img height="48" th:src="@{images/jwt.io-badge.svg}"></a></td>
                  </tr>
                  <tr>
                    <td>Java-Libraries</td>
                    <td>            
                      <a class="ms-2" target="_blank" title="JWT Java Libraries" href="https://jwt.io/libraries?language=Java"><img height="48" th:src="@{images/jwt.io-logo-asset.svg}"></a>
                      <span class="ms-2">
                        <a target="_blank" href="https://mvnrepository.com/artifact/org.bitbucket.b_c/jose4j">maven: org.bitbucket.b_c / jose4j</a> /
                        <a target="_blank" href="https://bitbucket.org/b_c/jose4j/wiki/Home">HOME</a>
                      </span>
                    </td>
                  </tr>

                </tbody>
              </table>
            </div>
          </div>
        </div>

        <div class="tab-pane fade show" id="nav-userinfo" role="tabpanel" aria-labelledby="nav-userinfo-tab">
          <div class="card appheader">
            <div class="card-header">
              <div class="d-flex justify-content-between align-items-center">
                <div class="appcard-title">Userinfo</div>
              </div>
            </div>
            <div class="card-body">
              <table class="table table-striped">
                <thead>
                  <tr>
                    <th style="width: 20%">Key</th>
                    <th style="width: 80%">Value</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>username</td>
                    <td th:text="${idTokenMap.preferred_username}"></td>
                  </tr>
                  <tr>
                    <td>email</td>
                    <td th:text="${idTokenMap.email}"></td>
                  </tr>
                  <tr>
                    <td>family_name</td>
                    <td th:text="${idTokenMap.family_name}"></td>
                  </tr>
                  <tr>
                    <td>given_name</td>
                    <td th:text="${idTokenMap.given_name}"></td>
                  </tr>
                  <tr>
                    <td>gender</td>
                    <td th:text="${idTokenMap.gender}"></td>
                  </tr>
                  <tr>
                    <td>realm roles</td>
                    <td th:text="${accessTokenMap.realm_access.roles}"></td>
                  </tr>
                  <tr>
                    <td>resource roles</td>
                    <td th:text="${accessTokenMap.resource_access.app1.roles}"></td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
        </div>

        <div class="tab-pane fade show" id="nav-idtoken" role="tabpanel" aria-labelledby="nav-idtoken-tab">
          <div class="card appheader">
            <div class="card-header">
              <div class="appcard-title">ID Token</div>
            </div>
            <div class="card-body">
              <table class="table table-striped">
                <thead>
                  <tr>
                    <th style="width: 10%">Key</th>
                    <th style="width: 40%">Value</th>
                    <th style="width: 50%">Description</th>
                  </tr>
                </thead>
                <tbody>
                  <tr class="align-middle" th:each="entry : ${idTokenMap}">
                    <td th:text="${entry.key}"></td>
                    <td th:text="${entry.value}"></td>
                    <td th:text="#{${entry.key}}"></td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
        </div>

        <div class="tab-pane fade show" id="nav-accesstoken" role="tabpanel" aria-labelledby="nav-accesstoken-tab">
          <div class="card appheader">
            <div class="card-header">
              <div class="appcard-title">Access Token</div>
            </div>
            <div class="card-body">
              <table class="table table-striped">
                <thead>
                  <tr>
                    <th style="width: 10%">Key</th>
                    <th style="width: 40%">Value</th>
                    <th style="width: 50%">Description</th>
                  </tr>
                </thead>
                <tbody>
                  <tr class="align-middle" th:each="entry : ${accessTokenMap}">
                    <td th:text="${entry.key}"></td>
                    <td th:text="${entry.value}"></td>
                    <td th:text="#{${entry.key}}"></td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
        </div>

        <div class="tab-pane fade show" id="nav-refreshtoken" role="tabpanel" aria-labelledby="nav-refreshtoken-tab">
          <div class="card appheader">
            <div class="card-header">
              <div class="appcard-title">Refresh Token</div>
            </div>
            <div class="card-body">
              <table class="table table-striped">
                <thead>
                  <tr>
                    <th style="width: 10%">Key</th>
                    <th style="width: 40%">Value</th>
                    <th style="width: 50%">Description</th>
                  </tr>
                </thead>
                <tbody>
                  <tr class="align-middle" th:each="entry : ${refreshTokenMap}">
                    <td th:text="${entry.key}"></td>
                    <td th:text="${entry.value}"></td>
                    <td th:text="#{${entry.key}}"></td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>

      <div class="row mt-4">
        <div class="col text-center">
          <p class="config-background p-1">Config</p>
        </div>
        <div class="col text-center">
          <p class="discovery-background p-1">Discovery</p>
        </div>
        <div class="col text-center">
          <p class="random-background p-1">Random</p>
        </div>
        <div class="col text-center">
          <p class="optional-background p-1">Optional</p>
        </div>
      </div>

    </div>

    <script th:src="@{/webjars/bootstrap/js/bootstrap.min.js}"></script>
    <script>
      function copyTokenFromData(button) {
        const token = button.getAttribute('data-token');
        const tempInput = document.createElement("textarea");
        tempInput.value = token;
        document.body.appendChild(tempInput);
        tempInput.select();
        document.execCommand("copy");
        document.body.removeChild(tempInput);
        console.log(token);
      }
    </script>
  </body>

</html> 
FILE: ./src/main/resources/application.yaml
----------------------------------------------------------
spring:
  application:
    name: l9g-webapp-native-oidc
  profiles:
    active: default
  config:
    import: optional:file:config.yaml
  messages:
    basename: messages
    encoding: UTF-8

logging:
  pattern:
    console: "%date{yyyy-MM-dd HH:mm:ss} %magenta([%thread]) %highlight(%-5level) %logger:%line - %yellow(%msg %n)"
  level:
    root: INFO
    l9g: TRACE

server:
  port: 8081
  servlet:
    context-path: /
    session:
      timeout: 9h


oidc:
  discovery-uri: https://id.dev.sonia.de/realms/dev/.well-known/openid-configuration

oauth2:
  redirect-uri: http://app1.dev.sonia.de:8081/oidc-login
  post-logout-redirect-uri: http://app1.dev.sonia.de:8081/oidc-logout
  client:
    id: app1
    secret: x45mpvfzvPU5utH7MvNclj2vtilaXW0i
    scope: openid profile email roles
    userid: preferred_username
 
FILE: ./src/main/java/l9g/webapp/nativeoidc/dto/OAuth2Tokens.java
----------------------------------------------------------
/*
 * Copyright 2024 Thorsten Ludewig (t.ludewig@gmail.com).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package l9g.webapp.nativeoidc.dto;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * A record representing OAuth2 tokens.
 * <p>
 * This record is used to encapsulate the various tokens received from an OAuth2
 * authorization server, including the access token, ID token, refresh token,
 * token type, and the expiration time of the access token.
 * </p>
 * <p>
 * The fields are annotated with {@link JsonProperty} to map the JSON properties
 * to the corresponding fields in this record.
 * </p>
 *
 * @param accessToken The access token issued by the authorization server.
 * @param idToken The ID token issued by the authorization server.
 * @param refreshToken The refresh token issued by the authorization server.
 * @param tokenType The type of the token issued by the authorization server.
 * @param expiresIn The lifetime in seconds of the access token.
 *
 * @author Thorsten Ludewig (t.ludewig@gmail.com)
 */
@JsonIgnoreProperties(ignoreUnknown = true)
public record OAuth2Tokens(
  @JsonProperty("access_token")
  String accessToken,
  @JsonProperty("id_token")
  String idToken,
  @JsonProperty("refresh_token")
  String refreshToken,
  @JsonProperty("token_type")
  String tokenType,
  @JsonProperty("expires_in")
  int expiresIn)
  {
}
 
FILE: ./src/main/java/l9g/webapp/nativeoidc/dto/JwksCerts.java
----------------------------------------------------------
/*
 * Copyright 2024 Thorsten Ludewig (t.ludewig@gmail.com).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package l9g.webapp.nativeoidc.dto;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Represents a collection of JSON Web Key Set (JWKS) certificates.
 * This class is used to deserialize the JWKS response from an OpenID Connect provider.
 *
 * @param keys A list of JSON Web Keys (JWKs).
 *
 * @author Thorsten Ludewig (t.ludewig@gmail.com)
 */
public record JwksCerts(
  List<JwksKey> keys)
  {
  /**
   * Represents a JSON Web Key (JWK) used in the JWKS response.
   *
   * @param keyId The unique identifier for the key.
   * @param keyType The cryptographic algorithm family used with the key.
   * @param algorithm The specific algorithm used with the key.
   * @param keyUsage The intended use of the key (e.g., signature, encryption).
   * @param modulus The modulus value for RSA keys.
   * @param exponent The exponent value for RSA keys.
   * @param x509CertificateChain The X.509 certificate chain corresponding to the key.
   * @param x509CertificateThumbprint The thumbprint of the X.509 certificate.
   * @param x509CertificateSha256Thumbprint The SHA-256 thumbprint of the X.509 certificate.
   */
  public record JwksKey(
    @JsonProperty("kid")
    String keyId,
    @JsonProperty("kty")
    String keyType,
    @JsonProperty("alg")
    String algorithm,
    @JsonProperty("use")
    String keyUsage,
    @JsonProperty("n")
    String modulus,
    @JsonProperty("e")
    String exponent,
    @JsonProperty("x5c")
    List<String> x509CertificateChain,
    @JsonProperty("x5t")
    String x509CertificateThumbprint,
    @JsonProperty("x5t#S256")
    String x509CertificateSha256Thumbprint)
    {
  }

}
 
FILE: ./src/main/java/l9g/webapp/nativeoidc/dto/JwtHeader.java
----------------------------------------------------------
/*
 * Copyright 2024 Thorsten Ludewig (t.ludewig@gmail.com).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package l9g.webapp.nativeoidc.dto;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Represents the header section of a JWT (JSON Web Token).
 * This class is used to deserialize the JWT header from its JSON representation.
 *
 * <p>
 * The JWT header typically contains metadata about the token, such as the
 * algorithm used for signing the token, the type of the token, and a key ID
 * (kid) that can be used to identify the key used to sign the token.</p>
 *
 * <p>
 * Example JSON representation of a JWT header:</p>
 * <pre>
 * {
 *   "alg": "HS256",
 *   "typ": "JWT",
 *   "kid": "12345"
 * }
 * </pre>
 *
 * <p>
 * This class uses Jackson annotations to map JSON properties to Java fields.</p>
 *
 * @param algorithm The algorithm used to sign the JWT.
 * @param type The type of the token, typically "JWT".
 * @param kid The key ID used to identify the key used to sign the JWT.
 *
 * @see <a href="https://tools.ietf.org/html/rfc7519#section-5">RFC 7519 Section 5</a>
 *
 * @author Thorsten Ludewig (t.ludewig@gmail.com)
 */
@JsonIgnoreProperties(ignoreUnknown = true)
public record JwtHeader(
  @JsonProperty("alg")
  String algorithm,
  @JsonProperty("typ")
  String type,
  @JsonProperty("kid")
  String kid)
  {
}
 
FILE: ./src/main/java/l9g/webapp/nativeoidc/dto/OidcDiscovery.java
----------------------------------------------------------
/*
 * Copyright 2024 Thorsten Ludewig (t.ludewig@gmail.com).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package l9g.webapp.nativeoidc.dto;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Represents the OpenID Connect (OIDC) Discovery metadata.
 * This record is used to deserialize the JSON response from the OIDC discovery endpoint.
 *
 * @param issuer The issuer identifier for the OpenID Provider.
 * @param authorizationEndpoint The URL of the authorization endpoint.
 * @param tokenEndpoint The URL of the token endpoint.
 * @param introspectionEndpoint The URL of the introspection endpoint.
 * @param userinfoEndpoint The URL of the userinfo endpoint.
 * @param endSessionEndpoint The URL of the end session endpoint.
 * @param frontchannelLogoutSessionSupported Indicates if frontchannel logout session is supported.
 * @param frontchannelLogoutSupported Indicates if frontchannel logout is supported.
 * @param jwksUri The URL of the JSON Web Key Set (JWKS) endpoint.
 * @param checkSessionIframe The URL of the check session iframe.
 * @param grantTypesSupported The list of grant types supported by the OpenID Provider.
 *
 * @author Thorsten Ludewig (t.ludewig@gmail.com)
 */
@JsonIgnoreProperties(ignoreUnknown = true)
public record OidcDiscovery(
  String issuer,
  @JsonProperty("authorization_endpoint")
  String authorizationEndpoint,
  @JsonProperty("token_endpoint")
  String tokenEndpoint,
  @JsonProperty("introspection_endpoint")
  String introspectionEndpoint,
  @JsonProperty("userinfo_endpoint")
  String userinfoEndpoint,
  @JsonProperty("end_session_endpoint")
  String endSessionEndpoint,
  @JsonProperty("frontchannel_logout_session_supported")
  boolean frontchannelLogoutSessionSupported,
  @JsonProperty("frontchannel_logout_supported")
  boolean frontchannelLogoutSupported,
  @JsonProperty("jwks_uri")
  String jwksUri,
  @JsonProperty("check_session_iframe")
  String checkSessionIframe,
  @JsonProperty("grant_types_supported")
  List<String> grantTypesTupported)
  {
}
 
FILE: ./src/main/java/l9g/webapp/nativeoidc/L9gWebappNativeOidcApplication.java
----------------------------------------------------------

/*
 * Copyright 2024 Thorsten Ludewig (t.ludewig@gmail.com).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * The main class for the L9gWebappNativeOidcApplication.
 * This is the entry point for the Spring Boot application.
 *
 * <p>
 * This application is configured to use Spring Boot's auto-configuration
 * feature, which simplifies the setup of the application by automatically
 * configuring Spring and third-party libraries based on the dependencies
 * present on the classpath.</p>
 *
 * <p>
 * To run the application, use the {@link SpringApplication#run(Class, String...)}
 * method, passing in this class and the command-line arguments.</p>
 *
 * <p>
 * Example usage:</p>
 * <pre>
 * {@code
 * public static void main(String[] args) {
 *     SpringApplication.run(L9gWebappNativeOidcApplication.class, args);
 * }
 * }
 * </pre>
 *
 * <p>
 * Make sure to configure the application properties as needed in the
 * application.properties or application.yml file.</p>
 *
 * @see SpringApplication
 * @see SpringBootApplication
 */
package l9g.webapp.nativeoidc;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class L9gWebappNativeOidcApplication
{
  public static void main(String[] args)
  {
    SpringApplication.run(L9gWebappNativeOidcApplication.class, args);
  }

}
 
FILE: ./src/main/java/l9g/webapp/nativeoidc/controller/WebController.java
----------------------------------------------------------
/*
 * Copyright 2024 Thorsten Ludewig (t.ludewig@gmail.com).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package l9g.webapp.nativeoidc.controller;

import jakarta.annotation.PostConstruct;
import l9g.webapp.nativeoidc.service.OidcService;
import l9g.webapp.nativeoidc.service.JwtService;
import l9g.webapp.nativeoidc.dto.OAuth2Tokens;
import jakarta.servlet.http.HttpSession;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.UUID;
import l9g.webapp.nativeoidc.service.PKCE;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.SpringBootVersion;
import org.springframework.boot.info.BuildProperties;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriComponentsBuilder;

/**
 * WebController is a Spring MVC controller that handles OAuth2/OIDC login and logout flows.
 * It provides endpoints for home, login, logout, and backchannel logout.
 *
 * <p>
 * Endpoints:</p>
 * <ul>
 * <li>GET / - Displays the home page and initializes OAuth2 login parameters.</li>
 * <li>GET /oidc-login - Handles the OIDC login callback, exchanges the authorization code for tokens, and stores them in the session.</li>
 * <li>GET /oidc-logout - Logs out the user by invalidating the session and redirects to the home page.</li>
 * <li>POST /oidc-backchannel-logout - Handles backchannel logout requests by invalidating the session associated with the provided logout token.</li>
 * <li>GET /app - Displays the application page if the user is authenticated, otherwise redirects to the home page.</li>
 * </ul>
 *
 * <p>
 * Session Attributes:</p>
 * <ul>
 * <li>SESSION_OAUTH2_STATE - Stores the OAuth2 state parameter to prevent CSRF attacks.</li>
 * <li>SESSION_OAUTH2_TOKENS - Stores the OAuth2 tokens (ID token, access token, refresh token) after successful login.</li>
 * <li>SESSION_OAUTH2_CODE_VERIFIER - Stores the PKCE code verifier used during the OAuth2 authorization code flow.</li>
 * </ul>
 *
 * <p>
 * Configuration Properties:</p>
 * <ul>
 * <li>oauth2.redirect-uri - The redirect URI for OAuth2 login.</li>
 * <li>oauth2.client.id - The client ID for OAuth2 login.</li>
 * <li>oauth2.client.scope - The scope for OAuth2 login.</li>
 * <li>oauth2.post-logout-redirect-uri - The redirect URI after logout.</li>
 * </ul>
 *
 * <p>
 * Dependencies:</p>
 * <ul>
 * <li>OidcService - Service for handling OIDC operations such as fetching tokens and getting endpoints.</li>
 * <li>JwtService - Service for decoding JWT tokens.</li>
 * </ul>
 *
 * <p>
 * Author: Thorsten Ludewig (t.ludewig@gmail.com)</p>
 */
@Controller
@Slf4j
@RequiredArgsConstructor
public class WebController
{
  private static final String SESSION_OAUTH2_STATE = "oauth2State";

  private static final String SESSION_OAUTH2_TOKENS = "oauth2Tokens";

  private static final String SESSION_OAUTH2_CODE_VERIFIER = "oauth2CodeVerifier";

  private final OidcService oidcService;

  private final JwtService jwtService;

  private final BuildProperties buildProperties;

  @Value("${oauth2.redirect-uri}")
  private String oauth2RedirectUri;

  @Value("${oauth2.client.id}")
  private String oauth2ClientId;

  @Value("${oauth2.client.scope}")
  private String oauth2ClientScope;

  @Value("${oauth2.post-logout-redirect-uri}")
  private String oauth2PostLogoutRedirectUri;

  private final HashMap<String, HttpSession> sessionStore = new HashMap<>();

  @PostConstruct
  private void initialize()
  {
    log.debug("oauth2RedirectUrl={}", oauth2RedirectUri);
    log.debug("oauth2ClientId={}", oauth2ClientId);
    log.debug("oauth2ClientScope={}", oauth2ClientScope);
  }

  @GetMapping("/")
  public String home(HttpSession session, Model model)
    throws Exception
  {
    OAuth2Tokens oauth2Tokens = (OAuth2Tokens)session.getAttribute(SESSION_OAUTH2_TOKENS);
    if(oauth2Tokens != null && oauth2Tokens.idToken() != null)
    {
      log.debug("Session already authenticated");
      return "redirect:/app";
    }

    String oauth2State = UUID.randomUUID().toString();
    String oauth2CodeVerifier = PKCE.generateCodeVerifier();
    String oauth2CodeChallenge = PKCE.generateCodeChallenge(oauth2CodeVerifier);

    log.debug("home={}", session.getId());

    log.debug("oauth2State={}", oauth2State);
    log.debug("oauth2CodeVerifier={}", oauth2CodeVerifier);
    log.debug("oauth2CodeChallenge={}", oauth2CodeChallenge);

    session.setAttribute(SESSION_OAUTH2_STATE, oauth2State);
    session.setAttribute(SESSION_OAUTH2_CODE_VERIFIER, oauth2CodeVerifier);

    model.addAttribute(SESSION_OAUTH2_STATE, oauth2State);
    model.addAttribute("oauth2ClientScope", oauth2ClientScope);
    model.addAttribute("oauth2ClientId", oauth2ClientId);
    model.addAttribute("oauth2RedirectUri", oauth2RedirectUri);
    model.addAttribute("oauth2AuthorizationEndpoint", oidcService.getOauth2AuthorizationEndpoint());
    model.addAttribute("oauth2ResponseType", "code");
    model.addAttribute("oauth2CodeChallenge", oauth2CodeChallenge);
    model.addAttribute("oauth2CodeChallengeMethod", "S256");
    model.addAttribute("oauth2CodeVerifier", oauth2CodeVerifier);
    model.addAttribute("sessionId", session.getId());
    model.addAttribute("oidcDiscoveryUri", oidcService.getOidcDiscoveryUri());
    model.addAttribute("oidcDiscovery", oidcService.getOidcDiscovery());

    UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(
      oidcService.getOauth2AuthorizationEndpoint());
    builder.queryParam("client_id", oauth2ClientId);
    builder.queryParam("response_type", "code");
    builder.queryParam("redirect_uri", oauth2RedirectUri);
    builder.queryParam("scope", oauth2ClientScope);
    builder.queryParam("state", oauth2State);
    builder.queryParam("code_challenge", oauth2CodeChallenge);
    builder.queryParam("code_challenge_method", "S256");
    model.addAttribute("oauth2LoginUri", builder.build().toUriString());

    ArrayList<String> keys = new ArrayList<>();
    buildProperties.forEach(p -> keys.add(p.getKey()));
    Collections.sort(keys);
    LinkedHashMap<String, String> properties = new LinkedHashMap<>();
    for(String key : keys)
    {
      properties.put(key, buildProperties.get(key));
    }
    model.addAttribute("buildProperties", properties);
    model.addAttribute("springBootVersion", SpringBootVersion.getVersion());

    return "home";
  }

  @GetMapping("/oidc-login")
  public String oidcLogin(
    @RequestParam(name = "code", required = false) String code,
    @RequestParam(name = "state", required = false) String state,
    @RequestParam(name = "error", required = false) String error,
    @RequestParam(name = "error_description", required = false) String errorDescription,
    HttpSession session,
    Model model)
  {
    log.debug("oidcLogin: code={}", code);
    log.debug("oidcLogin: state={}", state);
    log.debug("oidcLogin: error={}", error);
    log.debug("oidcLogin: error_description={}", errorDescription);

    if(error != null &&  ! error.isBlank())
    {
      log.error("Error: {} / {}", error, errorDescription);
      return "redirect:/";
    }

    String oauth2State = (String)session.getAttribute(SESSION_OAUTH2_STATE);

    if(oauth2State == null ||  ! oauth2State.equals(state))
    {
      log.error("Illegal 'state'");
      return "redirect:/";
    }

    OAuth2Tokens tokens = oidcService.fetchOAuth2Tokens(
      code, (String)session.getAttribute(SESSION_OAUTH2_CODE_VERIFIER));
    session.setAttribute(SESSION_OAUTH2_TOKENS, tokens);

    sessionStore.put(
      jwtService.decodeJwtPayload(tokens.idToken()).get("sid"), session);

    return "redirect:/app";
  }

  @GetMapping("/oidc-logout")
  public String oidcLogout(HttpSession session)
  {
    log.debug("oidcLogout");
    session.invalidate();
    return "redirect:/";
  }

  @PostMapping("/oidc-backchannel-logout")
  public ResponseEntity<Void> handleBackchannelLogout(@RequestBody String logoutToken)
  {
    log.debug("handleBackchannelLogout logoutToken={}", logoutToken);
    log.debug("decoded logoutToken={}", jwtService.decodeJwtPayload(logoutToken));

    String sid = jwtService.decodeJwtPayload(logoutToken).get("sid");

    if(sid != null)
    {
      HttpSession session = sessionStore.get(sid);
      if(session != null)
      {
        log.debug("invalidate session {}", session.getId());
        session.invalidate();
        sessionStore.remove(sid);
      }
    }

    return ResponseEntity.ok().build();
  }

  @GetMapping("/app")
  public String app(HttpSession session, Model model)
  {
    log.debug("app: session id = {}", session.getId());

    OAuth2Tokens oauth2Tokens = (OAuth2Tokens)session.getAttribute(SESSION_OAUTH2_TOKENS);

    if(oauth2Tokens == null || oauth2Tokens.idToken() == null)
    {
      return "redirect:/";
    }

    model.addAttribute("oauth2ClientId", oauth2ClientId);
    model.addAttribute("oauth2EndSessionEndpoint", oidcService.getOauth2EndSessionEndpoint());
    model.addAttribute("oauth2IdToken", oauth2Tokens.idToken());
    model.addAttribute("oauth2PostLogoutRedirectUri", oauth2PostLogoutRedirectUri);

    UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(
      oidcService.getOauth2EndSessionEndpoint());
    builder.queryParam("id_token_hint", oauth2Tokens.idToken());
    builder.queryParam("post_logout_redirect_uri", oauth2PostLogoutRedirectUri);
    model.addAttribute("oauth2LogoutUri", builder.build().toUriString());

    model.addAttribute("accessTokenMap", jwtService.decodeJwtPayload(oauth2Tokens.accessToken()));
    model.addAttribute("idTokenMap", jwtService.decodeJwtPayload(oauth2Tokens.idToken()));
    model.addAttribute("refreshTokenMap", jwtService.decodeJwtPayload(oauth2Tokens.refreshToken()));

    return "app";
  }

}
 
FILE: ./src/main/java/l9g/webapp/nativeoidc/service/JwtService.java
----------------------------------------------------------
/*
 * Copyright 2024 Thorsten Ludewig (t.ludewig@gmail.com).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package l9g.webapp.nativeoidc.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.nio.charset.StandardCharsets;
import java.security.Signature;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.security.interfaces.RSAPublicKey;
import java.util.Base64;
import java.util.HashMap;
import java.util.Map;
import l9g.webapp.nativeoidc.dto.JwksCerts;
import l9g.webapp.nativeoidc.dto.JwtHeader;
import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

/**
 * Service class for handling JWT (JSON Web Token) operations such as decoding and validating signatures.
 * This class provides methods to split, decode, and validate JWT tokens using various algorithms.
 *
 * <p>
 * It supports RS256 and HS512 algorithms for signature validation.</p>
 *
 * <p>
 * Methods:</p>
 * <ul>
 * <li>{@link #splitJwt(String)} - Splits a JWT token into its constituent parts.</li>
 * <li>{@link #decodeJwtPayload(String)} - Decodes the payload of a JWT token and returns it as a Map.</li>
 * <li>{@link #validateJwtSignature(String)} - Validates the signature of a JWT token.</li>
 * <li>{@link #getPublicKeyFromJwks(JwksCerts, String)} - Retrieves the public key from JWKS (JSON Web Key Set) using the key ID.</li>
 * <li>{@link #validateRs256Signature(String, String)} - Validates the RS256 signature of a JWT token.</li>
 * <li>{@link #validateHs512Signature(String)} - Validates the HS512 signature of a JWT token (currently returns true).</li>
 * </ul>
 *
 * <p>
 * Note: The HS512 signature validation method is currently a stub and always returns true.</p>
 *
 * <p>
 * Author: Thorsten Ludewig (t.ludewig@gmail.com)</p>
 */
@Service
@Slf4j
@Getter
public class JwtService
{
  @Setter
  private JwksCerts oauth2JwksCerts;

  public String[] splitJwt(String jwt)
  {
    String[] parts = jwt.split("\\.");
    if(parts.length != 3)
    {
      throw new IllegalArgumentException("Ungültiges JWT-Format");
    }
    return parts;
  }

  // decode Jwt ///////////////////////////////////////////////////////////
  public Map<String, String> decodeJwtPayload(String jwt)
  {
    try
    {
      String[] parts = splitJwt(jwt);

      String payload = parts[1];

      byte[] decodedBytes = Base64.getUrlDecoder().decode(payload);
      String decodedPayload = new String(decodedBytes);

      // JSON in Map umwandeln
      ObjectMapper objectMapper = new ObjectMapper();
      return objectMapper.readValue(decodedPayload, HashMap.class);
    }
    catch(Exception e)
    {
      throw new RuntimeException("Fehler beim Decodieren des JWT-Tokens", e);
    }
  }

  // validate Jwt ///////////////////////////////////////////////////////////
  public boolean validateJwtSignature(String jwt)
  {
    String[] parts = splitJwt(jwt);
    try
    {
      ObjectMapper mapper = new ObjectMapper();
      JwtHeader jwtHeader = mapper.readValue(
        new String(Base64.getUrlDecoder().decode(parts[0])), JwtHeader.class);

      log.debug("jwt header = {}", jwtHeader);

      if(null == jwtHeader.algorithm())
      {
        log.error("Unsupported algorithm: {}", jwtHeader.algorithm());
        return false;
      }
      else
      {
        switch(jwtHeader.algorithm())
        {
          case "RS256":
            return validateRs256Signature(jwt, jwtHeader.kid());
          case "HS512":
            return validateHs512Signature(jwt);
          default:
            log.error("Unsupported algorithm: {}", jwtHeader.algorithm());
            return false;
        }
      }
    }
    catch(Throwable t)
    {
      log.error("ERROR: {}", t.getMessage());
      t.printStackTrace();
      return false;
    }
  }

  /////////////////////////////////////////////////////////////////////////////
  private RSAPublicKey getPublicKeyFromJwks(JwksCerts jwksCerts, String kid)
    throws Exception
  {
    for(JwksCerts.JwksKey key : jwksCerts.keys())
    {
      log.debug("key={}", key);
      if(key.algorithm().equals("RS256"))
      {
        String x509Cert = key.x509CertificateChain().get(0);
        byte[] decodedCert = Base64.getDecoder().decode(x509Cert);
        CertificateFactory factory = CertificateFactory.getInstance("X.509");
        X509Certificate certificate =
          (X509Certificate)factory.generateCertificate(
            new java.io.ByteArrayInputStream(decodedCert));
        return (RSAPublicKey)certificate.getPublicKey();
      }
    }
    throw new IllegalArgumentException(
      "Public key with kid=" + kid + " not found");
  }

  private boolean validateRs256Signature(String jwt, String keyId)
  {
    try
    {
      String[] parts = splitJwt(jwt);
      String data = parts[0] + "." + parts[1];
      byte[] signatureBytes = Base64.getUrlDecoder().decode(parts[2]);

      // Öffentlichen Schlüssel abrufen
      RSAPublicKey publicKey = getPublicKeyFromJwks(oauth2JwksCerts, keyId);
      if(publicKey == null)
      {
        log.error("Public key with kid={} not found", keyId);
        return false;
      }

      // Signatur validieren
      Signature signature = Signature.getInstance("SHA256withRSA");
      signature.initVerify(publicKey);
      signature.update(data.getBytes(StandardCharsets.UTF_8));
      return signature.verify(signatureBytes);
    }
    catch(Throwable t)
    {
      log.error("ERROR in RS256 validation: {}", t.getMessage());
      t.printStackTrace();
      return false;
    }
  }

  private boolean validateHs512Signature(String jwt)
  {
    return true;
    /*
    String[] parts = splitJwt(jwt);
    
    log.debug("jwt={}",jwt);
    
    try
    {
      String data = parts[0] + "." + parts[1];

      log.debug("Header (Base64): {}", parts[0]);
      log.debug("Payload (Base64): {}", parts[1]);
      log.debug("Signature (Base64): {}", parts[2]);

      String headerDecoded = new String(
        Base64.getUrlDecoder().decode(parts[0]), StandardCharsets.UTF_8);

      log.debug("Header (Decoded): {}", headerDecoded);
      log.debug("oauth2ClientSecret: {}", oauth2ClientSecret);
      log.debug("data: {}", data);

      byte[] signatureBytes = Base64.getUrlDecoder().decode(parts[2]);

      // ---------------------------------------------------------------------

      Mac mac = Mac.getInstance("HmacSHA512");
      
      mac.init(new SecretKeySpec(
        oauth2ClientSecret.getBytes(StandardCharsets.UTF_8), "HmacSHA512"));
      
      byte[] calculatedSignature =
        mac.doFinal(data.getBytes(StandardCharsets.UTF_8));

      // ---------------------------------------------------------------------
      
      log.debug("Calculated Signature (Base64): {}",
        Base64.getUrlEncoder().withoutPadding()
          .encodeToString(calculatedSignature));
      
      log.debug("Received Signature (Base64): {}",
        Base64.getUrlEncoder().withoutPadding()
          .encodeToString(signatureBytes));

      return MessageDigest.isEqual(signatureBytes, calculatedSignature);
    }
    catch(Throwable t)
    {
      log.error("ERROR in HS512 validation: {}", t.getMessage());
      t.printStackTrace();
      return false;
    }
     */
  }

}
 
FILE: ./src/main/java/l9g/webapp/nativeoidc/service/PKCE.java
----------------------------------------------------------
/*
 * Copyright 2024 Thorsten Ludewig (t.ludewig@gmail.com).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package l9g.webapp.nativeoidc.service;

import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.Base64;

/**
 * The PKCE (Proof Key for Code Exchange) class provides methods to generate
 * a code verifier and a code challenge as part of the OAuth 2.0 PKCE extension.
 *
 * <p>
 * This class contains two main methods:
 * <ul>
 * <li>{@link #generateCodeVerifier()} - Generates a secure random code verifier.</li>
 * <li>{@link #generateCodeChallenge(String)} - Generates a code challenge based on the provided code verifier.</li>
 * </ul>
 * </p>
 *
 * <p>
 * Usage example:
 * <pre>
 * {@code
 * String codeVerifier = PKCE.generateCodeVerifier();
 * String codeChallenge = PKCE.generateCodeChallenge(codeVerifier);
 * }
 * </pre>
 * </p>
 *
 * <p>
 * Note: The {@link #generateCodeChallenge(String)} method throws a {@link NoSuchAlgorithmException}
 * if the SHA-256 algorithm is not available.</p>
 *
 * <p>
 * Author: Thorsten Ludewig (t.ludewig@gmail.com)</p>
 */
public class PKCE
{
  private PKCE()
  {
  }

  public static String generateCodeVerifier()
  {
    SecureRandom secureRandom = new SecureRandom();
    byte[] randomBytes = new byte[32];
    secureRandom.nextBytes(randomBytes);
    return Base64.getUrlEncoder().withoutPadding().encodeToString(randomBytes);
  }

  public static String generateCodeChallenge(String codeVerifier)
    throws NoSuchAlgorithmException
  {
    MessageDigest digest = MessageDigest.getInstance("SHA-256");
    byte[] hash = digest.digest(codeVerifier.getBytes(StandardCharsets.UTF_8));
    return Base64.getUrlEncoder().withoutPadding().encodeToString(hash);
  }
}
 
FILE: ./src/main/java/l9g/webapp/nativeoidc/service/OidcService.java
----------------------------------------------------------
/*
 * Copyright 2024 Thorsten Ludewig (t.ludewig@gmail.com).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package l9g.webapp.nativeoidc.service;

import l9g.webapp.nativeoidc.dto.JwksCerts;
import l9g.webapp.nativeoidc.dto.OAuth2Tokens;
import l9g.webapp.nativeoidc.dto.OidcDiscovery;
import jakarta.annotation.PostConstruct;
import java.util.function.Supplier;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestClient;

/**
 * OidcService is a Spring service that handles OpenID Connect (OIDC) and OAuth2 operations.
 * It initializes OIDC discovery endpoints and fetches OAuth2 tokens.
 *
 * <p>
 * It uses the following properties for configuration:
 * <ul>
 * <li>oidc.discovery-uri: URI for OIDC discovery</li>
 * <li>oauth2.authorization.endpoint: OAuth2 authorization endpoint</li>
 * <li>oauth2.token.endpoint: OAuth2 token endpoint</li>
 * <li>oauth2.end-session.endpoint: OAuth2 end session endpoint</li>
 * <li>oauth2.client.secret: OAuth2 client secret</li>
 * <li>oauth2.redirect-uri: OAuth2 redirect URI</li>
 * <li>oauth2.jwks_uri: OAuth2 JWKS URI</li>
 * </ul>
 *
 * <p>
 * Methods:
 * <ul>
 * <li>{@link #initialize()}: Initializes the OIDC discovery and sets up endpoints.</li>
 * <li>{@link #fetchOAuth2Tokens(String, String)}: Fetches OAuth2 tokens using authorization code and code verifier.</li>
 * </ul>
 *
 * <p>
 * Dependencies:
 * <ul>
 * <li>{@link RestClient.Builder}: Builder for creating RestClient instances.</li>
 * <li>{@link JwtService}: Service for handling JWT operations.</li>
 * </ul>
 *
 * <p>
 * Author: Thorsten Ludewig (t.ludewig@gmail.com)
 */
@Service
@Slf4j
@Getter
@RequiredArgsConstructor
public class OidcService
{
  private final RestClient.Builder builder;

  private final JwtService jwtService;

  private RestClient restClient;

  @Value("${oidc.discovery-uri}")
  private String oidcDiscoveryUri;

  @Value("${oauth2.authorization.endpoint:}")
  private String oauth2AuthorizationEndpoint;

  @Value("${oauth2.token.endpoint:}")
  private String oauth2tokenEndpoint;

  @Value("${oauth2.end-session.endpoint:}")
  private String oauth2EndSessionEndpoint;

  @Value("${oauth2.client.id}")
  private String oauth2ClientId;

  @Value("${oauth2.client.secret}")
  private String oauth2ClientSecret;

  @Value("${oauth2.redirect-uri}")
  private String oauth2RedirectUri;

  @Value("${oauth2.jwks_uri:}")
  private String oauth2JwksUri;

  private OidcDiscovery oidcDiscovery;

  @PostConstruct
  private void initialize()
  {
    log.debug("initialize oidcDiscoveryUri={}", oidcDiscoveryUri);
    restClient = builder.baseUrl(oidcDiscoveryUri).build();

    oidcDiscovery = fetchData(oidcDiscoveryUri, OidcDiscovery.class);

    if(oidcDiscovery != null)
    {
      oauth2AuthorizationEndpoint = defaultIfNullOrBlank(
        oauth2AuthorizationEndpoint, oidcDiscovery :: authorizationEndpoint);
      oauth2tokenEndpoint = defaultIfNullOrBlank(
        oauth2tokenEndpoint, oidcDiscovery :: tokenEndpoint);
      oauth2EndSessionEndpoint = defaultIfNullOrBlank(
        oauth2EndSessionEndpoint, oidcDiscovery :: endSessionEndpoint);
      oauth2JwksUri = defaultIfNullOrBlank(
        oauth2JwksUri, oidcDiscovery :: jwksUri);

      log.debug("oauth2AuthorizationEndpoint={}", oauth2AuthorizationEndpoint);
      log.debug("oauth2AuthorizationEndpoint={}", oauth2tokenEndpoint);
      log.debug("oauth2EndSessionEndpoint={}", oauth2EndSessionEndpoint);
      log.debug("oauth2JwksUri={}", oauth2JwksUri);

      JwksCerts jwksCerts = fetchData(oauth2JwksUri, JwksCerts.class);

      if(jwksCerts != null)
      {
        log.debug("{}",jwksCerts);
        jwtService.setOauth2JwksCerts(jwksCerts);
      }
    }
    else
    {
      log.error("Coult not fetch discovery endpoints.");
      System.exit(-1);
    }
  }

  public OAuth2Tokens fetchOAuth2Tokens(String code, String codeVerifier)
  {
    OAuth2Tokens tokens = null;

    MultiValueMap<String, String> bodyData = new LinkedMultiValueMap<>();
    bodyData.add("grant_type", "authorization_code");
    bodyData.add("code", code);
    bodyData.add("redirect_uri", oauth2RedirectUri);
    bodyData.add("client_id", oauth2ClientId);
    bodyData.add("client_secret", oauth2ClientSecret);

    if(codeVerifier != null &&  ! codeVerifier.isBlank())
    {
      log.debug("code_verifier={}", codeVerifier);
      bodyData.add("code_verifier", codeVerifier);
    }

    ResponseEntity<OAuth2Tokens> responseEntity = restClient
      .post()
      .uri(oauth2tokenEndpoint)
      .header("Content-Type", "application/x-www-form-urlencoded")
      .body(bodyData)
      .retrieve()
      .toEntity(new ParameterizedTypeReference<OAuth2Tokens>()
      {
      });

    if(responseEntity.getStatusCode().is2xxSuccessful())
    {
      tokens = responseEntity.getBody();

      log.trace("client secret='{}'", oauth2ClientSecret);
      log.debug("accessToken={}", tokens.accessToken());
      log.debug("valid access token = {}",
        jwtService.validateJwtSignature(tokens.accessToken()));
      log.debug("idToken={}", tokens.idToken());
      log.debug("valid id token = {}",
        jwtService.validateJwtSignature(tokens.idToken()));
      log.debug("refreshToken={}", tokens.refreshToken());
      log.debug("valid refresh token = {}",
        jwtService.validateJwtSignature(tokens.refreshToken()));
      log.debug("expiresIn={}", tokens.expiresIn());
    }

    return tokens;
  }

  private <T> T fetchData(String uri, Class clazz)
  {
    try
    {
      ResponseEntity<T> responseEntity = restClient
        .get()
        .uri(uri)
        .retrieve()
        .toEntity(parameterizedTypeReferenceFromClass(clazz));

      if(responseEntity.getStatusCode().is2xxSuccessful())
      {
        return responseEntity.getBody();
      }
    }
    catch(Exception e)
    {
      log.error("Error fetching data from {}", uri, e);
    }
    return null;
  }

  private String defaultIfNullOrBlank(
    String value, Supplier<String> defaultValueSupplier)
  {
    return (value == null
      || value.isBlank()) ? defaultValueSupplier.get() : value;
  }

  private <T> ParameterizedTypeReference<T>
    parameterizedTypeReferenceFromClass(Class<T> clazz)
  {
    return new ParameterizedTypeReference<>()
    {
      @Override
      public java.lang.reflect.Type getType()
      {
        return clazz;
      }

    };
  }

}
